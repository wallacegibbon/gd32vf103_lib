OUTPUT_ARCH( "riscv" )

ENTRY( _start )

MEMORY {
	/* Run in FLASH */
	/* for GD32VF103C4, FLASH: 16K, RAM: 6K */
	/* for GD32VF103C6, FLASH: 32K, RAM: 10K */
	/* for GD32VF103C8, FLASH: 64K, RAM: 20K */
	/* for GD32VF103CB, FLASH: 128K, RAM: 32K */
	FLASH (rxai!w) : ORIGIN = 0x08000000, LENGTH = 128K
	RAM   (wxa!ri) : ORIGIN = 0x20000000, LENGTH = 32K

	/* Run in RAM */
	/* for GD32VF103C4, FLASH: 4K, RAM: 2K */
	/* for GD32VF103C6, FLASH: 7K, RAM: 3K */
	/* for GD32VF103C8, FLASH: 15K, RAM: 5K */
	/* for GD32VF103CB, FLASH: 24K, RAM: 8K */
	/*
	FLASH (rxai!w) : ORIGIN = 0x20000000, LENGTH = 24K
	RAM   (wxa!ri) : ORIGIN = 0x20006000, LENGTH = 8K
	*/
}


SECTIONS {
	/* for GD32VF103C4 and GD32VF103C6, stack size should be 1K */
	__stack_size = DEFINED(__stack_size) ? __stack_size : 2K;

	.init : {
		KEEP (*(SORT_NONE(.init)))
	} >FLASH AT>FLASH

	.ilalign : {
		. = ALIGN(4);
		PROVIDE( _ilm_lma = . );
	} >FLASH AT>FLASH

	.ialign : {
		PROVIDE( _ilm = . );
	} >FLASH AT>FLASH

	.text : {
		*(.rodata .rodata.*)
		*(.text.unlikely .text.unlikely.*)
		*(.text.startup .text.startup.*)
		*(.text .text.*)
		*(.gnu.linkonce.t.*)
	} >FLASH AT>FLASH

	.fini : {
		KEEP (*(SORT_NONE(.fini)))
	} >FLASH AT>FLASH

	. = ALIGN(4);

	PROVIDE (__etext = .);
	PROVIDE (_etext = .); /*0x80022c8*/
	PROVIDE (etext = .); /*0x80022c8*/
	PROVIDE( _eilm = . );

	.preinit_array : {
		PROVIDE_HIDDEN (__preinit_array_start = .);
		KEEP (*(.preinit_array))
		PROVIDE_HIDDEN (__preinit_array_end = .);
	} >FLASH AT>FLASH

	.init_array : {
		PROVIDE_HIDDEN (__init_array_start = .);
		KEEP (*(SORT_BY_INIT_PRIORITY(.init_array.*)
			SORT_BY_INIT_PRIORITY(.ctors.*)))
		KEEP (*(.init_array EXCLUDE_FILE
			(*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o )
			.ctors))
		PROVIDE_HIDDEN (__init_array_end = .);
	} >FLASH AT>FLASH

	.fini_array : {
		PROVIDE_HIDDEN (__fini_array_start = .);
		KEEP (*(SORT_BY_INIT_PRIORITY(.fini_array.*)
			SORT_BY_INIT_PRIORITY(.dtors.*)))
		KEEP (*(.fini_array EXCLUDE_FILE
			(*crtbegin.o *crtbegin?.o *crtend.o *crtend?.o )
			.dtors))
		PROVIDE_HIDDEN (__fini_array_end = .);
	} >FLASH AT>FLASH

	.ctors : {
		/* gcc uses crtbegin.o to find the start of
		the constructors, so we make sure it is
		first.  Because this is a wildcard, it
		doesn't matter if the user does not
		actually link against crtbegin.o; the
		linker won't look for a file to match a
		wildcard.  The wildcard also means that it
		doesn't matter which directory crtbegin.o
		is in.
		*/
		KEEP (*crtbegin.o(.ctors))
		KEEP (*crtbegin?.o(.ctors))
		/* We don't want to include the .ctor section from
		the crtend.o file until after the sorted ctors.
		The .ctor section from the crtend file contains the
		end of ctors marker and it must be last
		*/
		KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
		KEEP (*(SORT(.ctors.*)))
		KEEP (*(.ctors))
	} >FLASH AT>FLASH

	.dtors : {
		KEEP (*crtbegin.o(.dtors))
		KEEP (*crtbegin?.o(.dtors))
		KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
		KEEP (*(SORT(.dtors.*)))
		KEEP (*(.dtors))
	} >FLASH AT>FLASH

	. = ALIGN(4);
	PROVIDE( _eilm = . );

	.lalign : {
		. = ALIGN(4);
		PROVIDE( _data_lma = . );
	} >FLASH AT>FLASH

	.dalign : {
		. = ALIGN(4);
		PROVIDE( _data = . );
	} >RAM AT>FLASH


	.data : {
		*(.rdata)
		*(.gnu.linkonce.r.*)
		*(.data .data.*)
		*(.gnu.linkonce.d.*)
		. = ALIGN(8);
		PROVIDE( __global_pointer$ = . + 0x800);
		*(.sdata .sdata.*)
		*(.gnu.linkonce.s.*)
		. = ALIGN(8);
		*(.srodata.cst16)
		*(.srodata.cst8)
		*(.srodata.cst4)
		*(.srodata.cst2)
		*(.srodata .srodata.*)
	} >RAM AT>FLASH

	. = ALIGN(4);
	PROVIDE( _edata = . );
	PROVIDE( edata = . );

	PROVIDE( _fbss = . ); /*0X200052A0  0X200002A0*/
	PROVIDE( __bss_start = . );
	.bss : {
		*(.sbss*)
		*(.gnu.linkonce.sb.*)
		*(.bss .bss.*)
		*(.gnu.linkonce.b.*)
		*(COMMON)
		. = ALIGN(4);
	} >RAM AT>RAM

	. = ALIGN(8);
	PROVIDE( _end = . ); /*0X2000,0340*/
	PROVIDE( end = . );

	.stack ORIGIN(RAM) + LENGTH(RAM) - __stack_size : {
		PROVIDE( _heap_end = . );
		. = __stack_size;
		PROVIDE( _sp = . );
	} >RAM AT>RAM
}
